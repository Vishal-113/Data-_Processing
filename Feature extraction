import numpy as np
import cv2
import matplotlib.pyplot as plt
import tensorflow as tf

# Task 1: Edge Detection Using Convolution
def edge_detection(image_path):
    # Load the grayscale image
    image = cv2.imread(r'C:\Users\VISHAL\OneDrive\Pictures\B2DBy.jpg', cv2.IMREAD_GRAYSCALE)


    if image is None:
        print("Error: Image not loaded. Please check the file path or if the image exists.")
        return None

    # Define Sobel filters
    sobel_x = np.array([
        [-1, 0, 1],
        [-2, 0, 2],
        [-1, 0, 1]
    ], dtype=np.float32)

    sobel_y = np.array([
        [-1, -2, -1],
        [0,  0,  0],
        [1,  2,  1]
    ], dtype=np.float32)

    # Apply Sobel filters
    sobel_x_output = cv2.filter2D(image, -1, sobel_x)
    sobel_y_output = cv2.filter2D(image, -1, sobel_y)

    # Normalize outputs for better visualization
    sobel_x_output = cv2.normalize(sobel_x_output, None, 0, 255, cv2.NORM_MINMAX)
    sobel_y_output = cv2.normalize(sobel_y_output, None, 0, 255, cv2.NORM_MINMAX)

    # Display results
    plt.figure(figsize=(12, 4))
    plt.subplot(1, 3, 1)
    plt.imshow(image, cmap='gray')
    plt.title('Original Image')
    plt.axis('off')

    plt.subplot(1, 3, 2)
    plt.imshow(sobel_x_output, cmap='gray')
    plt.title('Sobel X (Vertical Edges)')
    plt.axis('off')

    plt.subplot(1, 3, 3)
    plt.imshow(sobel_y_output, cmap='gray')
    plt.title('Sobel Y (Horizontal Edges)')
    plt.axis('off')

    plt.tight_layout()
    plt.show()

    return sobel_x_output  # Return Sobel X output for pooling

# Task 2: Max & Average Pooling
def apply_pooling(image):
    # Convert the grayscale image to a 4D array (batch, height, width, channels)
    input_matrix = np.expand_dims(image, axis=(0, -1)).astype(np.float32)

    # Define MaxPooling and AveragePooling layers
    max_pool = tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=2)
    avg_pool = tf.keras.layers.AveragePooling2D(pool_size=(2, 2), strides=2)

    # Apply pooling operations
    max_result = max_pool(input_matrix)
    avg_result = avg_pool(input_matrix)

    # Display pooled results
    print("\nMax Pooled 2x2:\n", max_result.numpy()[0, :, :, 0])
    print("\nAverage Pooled 2x2:\n", avg_result.numpy()[0, :, :, 0])

# Main execution
if __name__ == "__main__":
    # Path to your image
    image_path = r"C:\Users\VISHAL\Downloads\B2DBy.jpg"  # Use raw string to handle Windows paths

    # Perform edge detection
    sobel_x_output = edge_detection(image_path)

    if sobel_x_output is not None:
        # Perform pooling on the detected edges (Sobel X)
        print("\nApplying pooling on Sobel X (Vertical Edges):")
        apply_pooling(sobel_x_output)
